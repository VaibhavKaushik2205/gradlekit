
// Task to download, modify, and repackage JARs
tasks.register('customizeJar') {
    doLast {
        dependencyConfigs.each { dependency, config ->
            def (group, name, version) = dependency.split(':')
            def jarName = "${name}-${version}.jar"

            def downloadUrl = "https://repo1.maven.org/maven2/${group.replace('.', '/')}/${name}/${version}/${jarName}"

            def tempDir = file("${buildDir}/tmp/${name}")
            def extractedDir = file("${tempDir}/extracted")
            def modifiedJar = file("${projectDir}/customized-jars/${jarName}")

            // Skip if already exists
            if (modifiedJar.exists()) {
                println "✅ Skipping existing: ${modifiedJar.name}"
                return
            }

            println "⬇️  Downloading: ${downloadUrl}"
            tempDir.mkdirs()

            // Step 1: Download the JAR
            ant.get(src: downloadUrl, dest: tempDir)

            // Step 2: Extract the JAR
            ant.unzip(src: "${tempDir}/${jarName}", dest: extractedDir)

            // Step 3: Remove unwanted packages
            config.exclude.each { pattern ->
                findDirsByPattern(extractedDir, pattern).each { dir ->
                    if (dir.exists()) {
                        println "🧹 Removing: ${dir}"
                        dir.deleteDir()
                    }
                }
            }

            // Step 4: Repackage the modified JAR
            ant.jar(destfile: modifiedJar, basedir: extractedDir)

            // Step 5: Remove the temp dir
            tempDir.deleteDir()

        }
    }
}


// Utility function to find directories by pattern
def static findDirsByPattern(File baseDir, String pattern) {
    def matchingDirs = []
    baseDir.eachDirRecurse { dir ->
        if (dir.name.contains(pattern)) {
            matchingDirs.add(dir)
        }
    }
    return matchingDirs
}
